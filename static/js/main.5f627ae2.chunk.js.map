{"version":3,"sources":["images/death-star.png","components/Header/Header.js","components/Form/Form.js","components/UserProfile/UserProfile.js","components/MovieCard/MovieCard.js","components/MovieContainer/MovieContainer.js","components/CharacterCard/CharacterCard.js","components/Loader/Loader.js","components/CharacterContainer/CharacterContainer.js","components/apiCalls/apiCalls.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","heading","showHomeButton","logOut","className","src","deathStar","alt","to","onClick","Form","props","updateUserInfo","event","setState","target","name","value","validateForm","state","favoriteQuote","ranking","formComplete","updateStateFromForm","for","type","id","this","onChange","toString","Component","UserProfile","MovieCard","movie","updateStateWithCharacters","episode_id","title","toUpperCase","release_date","split","characters","MovieContainer","movies","sort","a","b","map","key","CharacterCard","character","species","homeworld","counter","films","film","showFilms","Loader","CharacterContainer","renderCards","isLoading","characterURLs","characterURL","fetch","then","response","ok","Error","json","data","speciesURL","homeworldURL","speciesInfo","homeworldInfo","population","Promise","all","push","slice","length","App","loggedIn","characterList","forEach","results","catch","error","console","log","exact","path","render","match","Boolean","window","location","hostname","router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f627ae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.225493aa.png\";","import React from 'react';\nimport deathStar from '../../images/death-star.png';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nfunction Header({ heading, showHomeButton, logOut }) {\n  return (\n    <header>\n      <div className='header-black-box'>x</div>\n      <div className='death-star-container'>\n        <img src={deathStar} alt='death star'/>\n      </div>\n      <div className='heading-line'>\n        <h1>{heading}</h1>\n        {\n          showHomeButton ?\n          <Link to='/'><button className='logout-button' onClick={() => logOut()}>LOG OUT</button></Link> :\n          <></>\n        }\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  heading: PropTypes.string,\n  showHomeButton: PropTypes.bool,\n  logOut: PropTypes.func\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Form.css';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      favoriteQuote: '',\n      ranking: 'jedi-master',\n      formComplete: 'hide'\n    }\n  }\n\n  updateUserInfo = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  validateForm = () => {\n    if(this.state.name && this.state.favoriteQuote && this.state.ranking) {\n      this.setState({ formComplete: 'hide' });\n      this.props.updateStateFromForm(this.state.name, this.state.favoriteQuote, this.state.ranking);\n    } else {\n      this.setState({ formComplete: 'show' })\n    }\n  }\n\n  render() {\n    return (\n      <form>\n        <label for='name' className='form-text'>WHAT IS YOUR FIRST NAME?</label>\n        <input\n          type='text'\n          name='name'\n          id='name'\n          value={this.state.name}\n          onChange={this.updateUserInfo}\n        />\n        <label for='quote' className='form-text'>WHAT IS YOUR FAVORITE STAR WARS QUOTE?</label>\n        <input\n          type='text'\n          name='favoriteQuote'\n          id='quote'\n          value={this.state.favoriteQuote}\n          onChange={this.updateUserInfo}\n        />\n        <label for='ranking' className='form-text'>HOW WELL DO YOU KNOW STAR WARS?</label>\n        <select\n          name='ranking'\n          id='ranking'\n          value={this.state.ranking}\n          onChange={this.updateUserInfo}\n        >\n          <option value='jedi-master'>JEDI MASTER</option>\n          <option value='jedi-knight'>JEDI KNIGHT</option>\n          <option value='padawan'>PADAWAN</option>\n        </select>\n        <span className={this.state.formComplete.toString()}>ALL FIELDS MUST BE FILLED IN</span>\n        <button type='button' onClick={this.validateForm}>LET'S GO</button>\n      </form>\n    )\n  }\n};\n\nForm.propTypes = {\n  updateStateFromForm: PropTypes.func\n}\n\nexport default Form;\n","import React from 'react';\nimport './UserProfile.css';\nimport PropTypes from 'prop-types';\n\nfunction UserProfile({ name, favoriteQuote, ranking }) {\n  return (\n    <section className='user-profile'>\n      <h2>{name}</h2>\n      <h3>{ranking}</h3>\n      <p>{favoriteQuote}</p>\n    </section>\n  );\n}\n\nUserProfile.propTypes = {\n  name: PropTypes.string,\n  favoriteQuote: PropTypes.string,\n  ranking: PropTypes.string\n}\n\nexport default UserProfile;\n","import React from 'react';\nimport './MovieCard.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\nfunction MovieCard({ movie, updateStateWithCharacters }) {\n\n  return (\n    <section className='movie-card'>\n      <h3>EPISODE {movie.episode_id}</h3>\n      <h2 className='movie-title'>{movie.title.toUpperCase()}</h2>\n      <h4>RELEASED IN {movie.release_date.split('-')[0]}</h4>\n      <Link to={`/movies/${movie.episode_id}`}>\n        <button className='view-characters-button' onClick={() => updateStateWithCharacters(movie.characters)}>VIEW CHARACTERS</button>\n      </Link>\n    </section>\n  );\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.object,\n  updateStateWithCharacters: PropTypes.func\n}\n\nexport default MovieCard;\n","import React from 'react';\nimport './MovieContainer.css';\nimport MovieCard from '../MovieCard/MovieCard';\nimport PropTypes from 'prop-types';\n\nfunction MovieContainer({ movies, updateStateWithCharacters }) {\n  const renderCards = () => {\n    return movies.sort((a, b) => a.episode_id - b.episode_id).map(movie => {\n      return (\n        <MovieCard\n          key={movie.episode_id}\n          movie={movie}\n          updateStateWithCharacters={updateStateWithCharacters}\n        />\n      )\n    })\n  }\n\n  return (\n    <section className='movie-container'>\n      {renderCards()}\n    </section>\n  );\n}\n\nMovieContainer.propTypes = {\n  movies: PropTypes.array,\n  updateStateWithCharacters: PropTypes.func\n}\n\nexport default MovieContainer;\n","import React, { Component } from 'react';\nimport './CharacterCard.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nfunction CharacterCard({ character }) {\n  const showFilms = () => {\n    let counter=0;\n    return character.films.map(film => {\n      counter++;\n      return <p key={counter}>- {film}</p>\n    })\n  }\n\n  return (\n    <section className='character-card'>\n      <h2>{character.name}</h2>\n      <h4>SPECIES: <br /> {character.species}</h4>\n      <h4>HOMEWORLD: <br /> {character.homeworld[0]}</h4>\n      <h4>POPULATION: <br /> {character.homeworld[1]}</h4>\n      <h4>FILMS:</h4>\n      {showFilms()}\n    </section>\n  )\n}\n\nCharacterCard.propTypes = {\n  character: PropTypes.object\n}\n\nexport default CharacterCard;\n","import React from 'react';\nimport deathStar from '../../images/death-star.png';\nimport './Loader.css'\n\nconst Loader = () => (\n<div className='loader-container'>\n  <img src={deathStar} className=\"loader-image\" alt=\"deathStar\" />\n  <p className='loader-text'>loading...</p>\n</div>\n)\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport './CharacterContainer.css';\nimport CharacterCard from '../CharacterCard/CharacterCard';\nimport Loader from '../Loader/Loader';\nimport { getCharacter, getSpecies, getHomeworld, getFilm } from '../apiCalls/apiCalls';\nimport PropTypes from 'prop-types';\n\nclass CharacterContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      characters: []\n    }\n  }\n\n  componentDidMount() {\n    let characters = [];\n    this.props.characterURLs.map(character => {\n      return getCharacter(character)\n      .then(data => {\n        let name = data.name;\n        let speciesInfo = getSpecies(data.species[0]);\n        let homeworldInfo = getHomeworld(data.homeworld);\n        let films = data.films.map(film => getFilm(film))\n\n        Promise.all([name, speciesInfo, homeworldInfo, ...films])\n          .then(data => {\n            characters.push({\n              name: data[0],\n              species: data[1],\n              homeworld: data[2],\n              films: data.slice(3)\n            })\n            if (characters.length > 9) {\n              this.setState({\n                isLoading: false,\n                characters: characters\n              })\n            }\n          })\n      })\n    })\n  }\n\n  renderCards = () => {\n    let counter = 0;\n    return this.state.characters.map(character => {\n      counter++;\n      return (\n        <CharacterCard\n          character={character}\n          key={counter}\n        />\n      )\n    })\n  }\n\n  render() {\n    return (\n    <section className='character-container'>\n      {\n        this.state.isLoading ?\n        <Loader /> :\n        this.renderCards()\n      }\n    </section>\n    );\n  }\n}\n\nCharacterContainer.propTypes = {\n  characterURLs: PropTypes.array\n}\n\nexport default CharacterContainer;\n","export const getMovies = () => {\n  return fetch('https://swapi.co/api/films')\n  .then(response => {\n    if (!response.ok) {\n      throw Error('Oops! We had trouble finding the information you asked for. Please try again.');\n    }\n    return response.json();\n  })\n}\n\nexport const getCharacter = (characterURL) => {\n  return fetch(characterURL)\n  .then(response => {\n    if (!response.ok) {\n      throw Error('Oops! We had trouble finding the information you asked for. Please try again.');\n    }\n    return response.json();\n  })\n}\n\nexport const getSpecies = (speciesURL) => {\n  return fetch(speciesURL)\n  .then(response => {\n    if (!response.ok) {\n      throw Error('Oops! We had trouble finding the information you asked for. Please try again.');\n    }\n    return response.json();\n  })\n  .then(data => data.name)\n}\n\nexport const getHomeworld = (homeworldURL) => {\n  return fetch(homeworldURL)\n  .then(response => {\n    if (!response.ok) {\n      throw Error('Oops! We had trouble finding the information you asked for. Please try again.');\n    }\n    return response.json();\n  })\n  .then(data => {\n    return [data.name, data.population]\n  })\n}\n\nexport const getFilm = (filmURL) => {\n  return fetch(filmURL)\n  .then(response => {\n    if (!response.ok) {\n      throw Error('Oops! We had trouble finding the information you asked for. Please try again.');\n    }\n    return response.json();\n  })\n  .then(data => data.title)\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport Form from '../Form/Form';\nimport UserProfile from '../UserProfile/UserProfile';\nimport MovieContainer from '../MovieContainer/MovieContainer';\nimport CharacterContainer from '../CharacterContainer/CharacterContainer';\nimport { getMovies } from '../apiCalls/apiCalls'\nimport { Route, Redirect } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loggedIn: false,\n      name: '',\n      favoriteQuote: '',\n      ranking: '',\n      movies: [],\n      characterURLs: []\n    }\n  }\n\n  componentDidMount() {\n    getMovies()\n    .then(movies => {\n      this.setState({\n        movies: movies.results\n      })\n    })\n    .catch(error => console.log(error))\n  }\n\n  updateStateFromForm = (name, favoriteQuote, ranking) => {\n    this.setState({\n      loggedIn: true,\n      name: name,\n      favoriteQuote: favoriteQuote,\n      ranking: ranking\n    })\n  }\n\n  updateStateWithCharacters = (characters) => {\n    let characterList = [];\n    characters.forEach(character => {\n      if (characterList.length < 10) {\n        characterList.push(character);\n      }\n    })\n    this.setState({\n      characterURLs: characterList\n    })\n  }\n\n  logOut = () => {\n    this.setState({\n      loggedIn: false\n    })\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <Route exact path=\"/\">\n          {this.state.loggedIn ? <Redirect to=\"/movies\" /> : (\n            <>\n              <Header\n                heading='HELLO, YOUNG JEDI'\n                showHomeButton={false}\n                logOut={this.logOut}\n              />\n              <Form\n                updateStateFromForm={this.updateStateFromForm}\n              />\n            </>\n          )}\n        </Route>\n        <Route exact path='/movies' render={() => {\n          return (\n            <>\n              <UserProfile\n                name={this.state.name}\n                favoriteQuote={this.state.favoriteQuote}\n                ranking={this.state.ranking}\n              />\n              <Header\n                heading='THE MOVIES'\n                showHomeButton={true}\n                logOut={this.logOut}\n              />\n              <MovieContainer\n                movies={this.state.movies}\n                updateStateWithCharacters={this.updateStateWithCharacters}\n                />\n            </>\n          )\n        }} />\n        <Route path='/movies/:id' render={({ match }) => {\n          return (\n            <>\n              <UserProfile\n                name={this.state.name}\n                favoriteQuote={this.state.favoriteQuote}\n                ranking={this.state.ranking}\n              />\n              <Header\n                heading='THE CHARACTERS'\n                showHomeButton={true}\n                logOut={this.logOut}\n              />\n              <CharacterContainer characterURLs={this.state.characterURLs}/>\n            </>\n          )\n        }} />\n      </main>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nconst router = (\n  <Router>\n    <App />\n  </Router>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}